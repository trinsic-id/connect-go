/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connect

import (
	"encoding/json"
	"fmt"
)

// SessionFailCode the model 'SessionFailCode'
type SessionFailCode string

// List of SessionFailCode
const (
	SESSION_FAIL_NONE SessionFailCode = "SessionFailNone"
	SESSION_FAIL_INTERNAL SessionFailCode = "SessionFailInternal"
	SESSION_FAIL_VERIFICATION_FAILED SessionFailCode = "SessionFailVerificationFailed"
	SESSION_FAIL_AUTHENTICATION SessionFailCode = "SessionFailAuthentication"
	SESSION_FAIL_EXPIRED SessionFailCode = "SessionFailExpired"
	SESSION_FAIL_USER_CANCELED SessionFailCode = "SessionFailUserCanceled"
	SESSION_FAIL_RP_CANCELED SessionFailCode = "SessionFailRpCanceled"
)

// All allowed values of SessionFailCode enum
var AllowedSessionFailCodeEnumValues = []SessionFailCode{
	"SessionFailNone",
	"SessionFailInternal",
	"SessionFailVerificationFailed",
	"SessionFailAuthentication",
	"SessionFailExpired",
	"SessionFailUserCanceled",
	"SessionFailRpCanceled",
}

func (v *SessionFailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionFailCode(value)
	for _, existing := range AllowedSessionFailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionFailCode", value)
}

// NewSessionFailCodeFromValue returns a pointer to a valid SessionFailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionFailCodeFromValue(v string) (*SessionFailCode, error) {
	ev := SessionFailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionFailCode: valid values are %v", v, AllowedSessionFailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionFailCode) IsValid() bool {
	for _, existing := range AllowedSessionFailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionFailCode value
func (v SessionFailCode) Ptr() *SessionFailCode {
	return &v
}

type NullableSessionFailCode struct {
	value *SessionFailCode
	isSet bool
}

func (v NullableSessionFailCode) Get() *SessionFailCode {
	return v.value
}

func (v *NullableSessionFailCode) Set(val *SessionFailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionFailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionFailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionFailCode(val *SessionFailCode) *NullableSessionFailCode {
	return &NullableSessionFailCode{value: val, isSet: true}
}

func (v NullableSessionFailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionFailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

