/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateSessionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSessionResponse{}

// CreateSessionResponse struct for CreateSessionResponse
type CreateSessionResponse struct {
	// The created Acceptance Session
	Session Session `json:"session"`
	// The URL that should be used to invoke the Acceptance Session on your user's device.                If the Session was created with `LaunchMethodDirectly` set to `true`, you should redirect your user's browser to this URL. The frontend SDK cannot presently be used to  invoke these Sessions.                Otherwise, you should pass this URL to your user's frontend and use the frontend SDK to invoke the Session.                This URL is sensitive and as such can only be obtained once. If you need to obtain it again, you will need to create a new Acceptance Session.
	LaunchUrl *string `json:"launchUrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateSessionResponse CreateSessionResponse

// NewCreateSessionResponse instantiates a new CreateSessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSessionResponse(session Session) *CreateSessionResponse {
	this := CreateSessionResponse{}
	this.Session = session
	return &this
}

// NewCreateSessionResponseWithDefaults instantiates a new CreateSessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSessionResponseWithDefaults() *CreateSessionResponse {
	this := CreateSessionResponse{}
	return &this
}

// GetSession returns the Session field value
func (o *CreateSessionResponse) GetSession() Session {
	if o == nil {
		var ret Session
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *CreateSessionResponse) GetSessionOk() (*Session, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *CreateSessionResponse) SetSession(v Session) {
	o.Session = v
}

// GetLaunchUrl returns the LaunchUrl field value if set, zero value otherwise.
func (o *CreateSessionResponse) GetLaunchUrl() string {
	if o == nil || IsNil(o.LaunchUrl) {
		var ret string
		return ret
	}
	return *o.LaunchUrl
}

// GetLaunchUrlOk returns a tuple with the LaunchUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSessionResponse) GetLaunchUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchUrl) {
		return nil, false
	}
	return o.LaunchUrl, true
}

// HasLaunchUrl returns a boolean if a field has been set.
func (o *CreateSessionResponse) HasLaunchUrl() bool {
	if o != nil && !IsNil(o.LaunchUrl) {
		return true
	}

	return false
}

// SetLaunchUrl gets a reference to the given string and assigns it to the LaunchUrl field.
func (o *CreateSessionResponse) SetLaunchUrl(v string) {
	o.LaunchUrl = &v
}

func (o CreateSessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSessionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["session"] = o.Session
	if !IsNil(o.LaunchUrl) {
		toSerialize["launchUrl"] = o.LaunchUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateSessionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"session",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSessionResponse := _CreateSessionResponse{}

	err = json.Unmarshal(data, &varCreateSessionResponse)

	if err != nil {
		return err
	}

	*o = CreateSessionResponse(varCreateSessionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "session")
		delete(additionalProperties, "launchUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateSessionResponse struct {
	value *CreateSessionResponse
	isSet bool
}

func (v NullableCreateSessionResponse) Get() *CreateSessionResponse {
	return v.value
}

func (v *NullableCreateSessionResponse) Set(val *CreateSessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSessionResponse(val *CreateSessionResponse) *NullableCreateSessionResponse {
	return &NullableCreateSessionResponse{value: val, isSet: true}
}

func (v NullableCreateSessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


