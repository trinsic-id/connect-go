/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the IdentityData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityData{}

// IdentityData struct for IdentityData
type IdentityData struct {
	// The ID of the integration from which this data originated (eg \"yoti\", \"clear\")
	OriginatingProviderId *string `json:"originatingProviderId,omitempty"`
	// Identity data of the individual who was verified
	Person *PersonData `json:"person,omitempty"`
	// Identity data of the document involved in verification, if relevant
	Document *DocumentData `json:"document,omitempty"`
	// Attachment Access Keys for attachments (eg document / selfie images)
	AttachmentAccessKeys *AttachmentAccessKeys `json:"attachmentAccessKeys,omitempty"`
}

// NewIdentityData instantiates a new IdentityData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityData() *IdentityData {
	this := IdentityData{}
	return &this
}

// NewIdentityDataWithDefaults instantiates a new IdentityData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityDataWithDefaults() *IdentityData {
	this := IdentityData{}
	return &this
}

// GetOriginatingProviderId returns the OriginatingProviderId field value if set, zero value otherwise.
func (o *IdentityData) GetOriginatingProviderId() string {
	if o == nil || IsNil(o.OriginatingProviderId) {
		var ret string
		return ret
	}
	return *o.OriginatingProviderId
}

// GetOriginatingProviderIdOk returns a tuple with the OriginatingProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityData) GetOriginatingProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginatingProviderId) {
		return nil, false
	}
	return o.OriginatingProviderId, true
}

// HasOriginatingProviderId returns a boolean if a field has been set.
func (o *IdentityData) HasOriginatingProviderId() bool {
	if o != nil && !IsNil(o.OriginatingProviderId) {
		return true
	}

	return false
}

// SetOriginatingProviderId gets a reference to the given string and assigns it to the OriginatingProviderId field.
func (o *IdentityData) SetOriginatingProviderId(v string) {
	o.OriginatingProviderId = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *IdentityData) GetPerson() PersonData {
	if o == nil || IsNil(o.Person) {
		var ret PersonData
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityData) GetPersonOk() (*PersonData, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *IdentityData) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given PersonData and assigns it to the Person field.
func (o *IdentityData) SetPerson(v PersonData) {
	o.Person = &v
}

// GetDocument returns the Document field value if set, zero value otherwise.
func (o *IdentityData) GetDocument() DocumentData {
	if o == nil || IsNil(o.Document) {
		var ret DocumentData
		return ret
	}
	return *o.Document
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityData) GetDocumentOk() (*DocumentData, bool) {
	if o == nil || IsNil(o.Document) {
		return nil, false
	}
	return o.Document, true
}

// HasDocument returns a boolean if a field has been set.
func (o *IdentityData) HasDocument() bool {
	if o != nil && !IsNil(o.Document) {
		return true
	}

	return false
}

// SetDocument gets a reference to the given DocumentData and assigns it to the Document field.
func (o *IdentityData) SetDocument(v DocumentData) {
	o.Document = &v
}

// GetAttachmentAccessKeys returns the AttachmentAccessKeys field value if set, zero value otherwise.
func (o *IdentityData) GetAttachmentAccessKeys() AttachmentAccessKeys {
	if o == nil || IsNil(o.AttachmentAccessKeys) {
		var ret AttachmentAccessKeys
		return ret
	}
	return *o.AttachmentAccessKeys
}

// GetAttachmentAccessKeysOk returns a tuple with the AttachmentAccessKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityData) GetAttachmentAccessKeysOk() (*AttachmentAccessKeys, bool) {
	if o == nil || IsNil(o.AttachmentAccessKeys) {
		return nil, false
	}
	return o.AttachmentAccessKeys, true
}

// HasAttachmentAccessKeys returns a boolean if a field has been set.
func (o *IdentityData) HasAttachmentAccessKeys() bool {
	if o != nil && !IsNil(o.AttachmentAccessKeys) {
		return true
	}

	return false
}

// SetAttachmentAccessKeys gets a reference to the given AttachmentAccessKeys and assigns it to the AttachmentAccessKeys field.
func (o *IdentityData) SetAttachmentAccessKeys(v AttachmentAccessKeys) {
	o.AttachmentAccessKeys = &v
}

func (o IdentityData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginatingProviderId) {
		toSerialize["originatingProviderId"] = o.OriginatingProviderId
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.Document) {
		toSerialize["document"] = o.Document
	}
	if !IsNil(o.AttachmentAccessKeys) {
		toSerialize["attachmentAccessKeys"] = o.AttachmentAccessKeys
	}
	return toSerialize, nil
}

type NullableIdentityData struct {
	value *IdentityData
	isSet bool
}

func (v NullableIdentityData) Get() *IdentityData {
	return v.value
}

func (v *NullableIdentityData) Set(val *IdentityData) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityData) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityData(val *IdentityData) *NullableIdentityData {
	return &NullableIdentityData{value: val, isSet: true}
}

func (v NullableIdentityData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


