/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connect

import (
	"encoding/json"
)

// checks if the DocumentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentData{}

// DocumentData struct for DocumentData
type DocumentData struct {
	Type *string `json:"type,omitempty"`
	Number *string `json:"number,omitempty"`
	IssueDate *string `json:"issueDate,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	IssuingCountry *string `json:"issuingCountry,omitempty"`
}

// NewDocumentData instantiates a new DocumentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentData() *DocumentData {
	this := DocumentData{}
	return &this
}

// NewDocumentDataWithDefaults instantiates a new DocumentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDataWithDefaults() *DocumentData {
	this := DocumentData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DocumentData) SetType(v string) {
	o.Type = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *DocumentData) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentData) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *DocumentData) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *DocumentData) SetNumber(v string) {
	o.Number = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *DocumentData) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentData) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *DocumentData) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *DocumentData) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *DocumentData) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentData) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *DocumentData) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *DocumentData) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise.
func (o *DocumentData) GetIssuingCountry() string {
	if o == nil || IsNil(o.IssuingCountry) {
		var ret string
		return ret
	}
	return *o.IssuingCountry
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentData) GetIssuingCountryOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingCountry) {
		return nil, false
	}
	return o.IssuingCountry, true
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *DocumentData) HasIssuingCountry() bool {
	if o != nil && !IsNil(o.IssuingCountry) {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given string and assigns it to the IssuingCountry field.
func (o *DocumentData) SetIssuingCountry(v string) {
	o.IssuingCountry = &v
}

func (o DocumentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.IssuingCountry) {
		toSerialize["issuingCountry"] = o.IssuingCountry
	}
	return toSerialize, nil
}

type NullableDocumentData struct {
	value *DocumentData
	isSet bool
}

func (v NullableDocumentData) Get() *DocumentData {
	return v.value
}

func (v *NullableDocumentData) Set(val *DocumentData) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentData) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentData(val *DocumentData) *NullableDocumentData {
	return &NullableDocumentData{value: val, isSet: true}
}

func (v NullableDocumentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


