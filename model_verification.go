/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connect

import (
	"encoding/json"
)

// checks if the Verification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Verification{}

// Verification A Verification contained within a Session
type Verification struct {
	// The identity provider that was used to perform the Verification, if any
	Provider *string `json:"provider,omitempty"`
	// If the Verification is in state `VerificationFailed`, this field contains the reason for failure
	FailCode *VerificationFailCode `json:"failCode,omitempty"`
}

// NewVerification instantiates a new Verification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerification() *Verification {
	this := Verification{}
	return &this
}

// NewVerificationWithDefaults instantiates a new Verification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationWithDefaults() *Verification {
	this := Verification{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Verification) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Verification) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Verification) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *Verification) SetProvider(v string) {
	o.Provider = &v
}

// GetFailCode returns the FailCode field value if set, zero value otherwise.
func (o *Verification) GetFailCode() VerificationFailCode {
	if o == nil || IsNil(o.FailCode) {
		var ret VerificationFailCode
		return ret
	}
	return *o.FailCode
}

// GetFailCodeOk returns a tuple with the FailCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Verification) GetFailCodeOk() (*VerificationFailCode, bool) {
	if o == nil || IsNil(o.FailCode) {
		return nil, false
	}
	return o.FailCode, true
}

// HasFailCode returns a boolean if a field has been set.
func (o *Verification) HasFailCode() bool {
	if o != nil && !IsNil(o.FailCode) {
		return true
	}

	return false
}

// SetFailCode gets a reference to the given VerificationFailCode and assigns it to the FailCode field.
func (o *Verification) SetFailCode(v VerificationFailCode) {
	o.FailCode = &v
}

func (o Verification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Verification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.FailCode) {
		toSerialize["failCode"] = o.FailCode
	}
	return toSerialize, nil
}

type NullableVerification struct {
	value *Verification
	isSet bool
}

func (v NullableVerification) Get() *Verification {
	return v.value
}

func (v *NullableVerification) Set(val *Verification) {
	v.value = val
	v.isSet = true
}

func (v NullableVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerification(val *Verification) *NullableVerification {
	return &NullableVerification{value: val, isSet: true}
}

func (v NullableVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


